1.#将git上的代码更新到本地
git pull origin <branch-name>/分支名称

2.#将本地的文件上传到git
git add 666.txt添加文件名
git commit -m “cc” 引号内的内容可以随意改动，这个语句的意思是 给你刚刚上传的文件一个备注，方便查找记忆而已
git push origin master



3.#将本地文件的修改上传到Git
(1)查看文件状态： 在终端或命令行中，使用以下命令来查看文件的状态，以了解哪些文件已经被修改：
git status
这将显示已修改的文件列表。
(2)添加修改的文件到暂存区： 使用以下命令将您修改的文件添加到Git的暂存区（也称为索引）中：
git add 文件名
或者，如果您要添加所有已修改的文件，可以使用以下命令
git add .
(3)提交更改： 一旦文件被添加到暂存区，您需要提交更改。使用以下命令提交更改：
git commit -m "提交消息"
(4)推送更改到远程仓库： 如果您的本地仓库与远程仓库关联，您可以使用以下命令将更改推送到远程仓库：
git push
如果这是第一次推送或者您在远程仓库创建了一个新的分支，可能需要使用以下命令：
git push -u origin 分支名


4.#本地更新从Git仓库获取的代码
(1)查看当前分支： 在终端或命令行中，使用以下命令来查看当前所在的分支：
git branch
这将列出所有可用的分支，当前所在的分支会有一个星号 (*) 标记。
(2)切换到需要更新的分支： 如果不在要更新的分支上，使用以下命令切换到该分支。假设您要更新的分支是main：
git checkout main
(3)拉取最新的代码： 一旦切换到了要更新的分支，使用以下命令从远程仓库拉取最新的代码：
git pull



5.#将别人的Git代码拉到自己的仓库，执行以下步骤：
1.Fork别人的仓库： 首先，访问您想要拉取代码的仓库在GitHub上的页面。在仓库页面的右上角，您会看到一个按钮，标有 "Fork"。点击它，将这个仓库复制到您自己的GitHub账号下。

2.克隆您自己的仓库： 现在，在您自己的GitHub账号下，找到已经Fork的仓库。点击仓库的名称，然后点击绿色的 "Code" 按钮，复制仓库的URL。

3.在本地克隆仓库： 打开终端或命令行，使用以下命令将您自己的仓库克隆到本地：
git clone 你的仓库URL
将 "你的仓库URL" 替换为您在步骤2中复制的仓库URL。这将创建一个本地副本，其中包含您自己的仓库的代码。



6.#使用命令将GitHub上的文件删除，您可以使用以下步骤：
(1)在本地删除文件： 首先，在您的本地项目目录中，使用命令行或终端删除要删除的文件。例如，如果要删除名为 666.txt 的文件，可以运行以下命令：
rm 666.txt
或者，如果您使用的是Windows命令行，可以使用 del 命令：del 666.txt
(2)将删除操作提交到Git： 现在，您需要告诉Git要删除这个文件。使用以下命令将删除操作提交到Git：
git rm 666.txt
(3)提交更改： 接下来，需要提交这个删除操作。使用以下命令提交更改：
git commit -m "删除文件 666.txt"
(4)推送更改到GitHub： 最后，将您的本地更改推送到GitHub仓库，以使删除操作在远程仓库中生效：
git push


7.#删除本地仓库的文件
(1)在本地删除文件： 首先，在您的本地项目目录中，使用命令行或终端删除要删除的文件。例如，如果要删除名为 myfile.txt 的文件，可以运行以下命令：
rm myfile.txt  # 在Linux或Mac上
或者，如果您使用的是Windows命令行，可以使用 del 命令:del myfile.txt
(2)从Git跟踪中删除文件： 删除文件后，您需要告诉Git停止跟踪该文件。使用以下命令将文从Git的跟踪中删除：
git rm 文件名
(3)提交更改： 接下来，需要提交这个删除操作。使用以下命令提交更改：
git commit -m "删除文件 文件名"
(4)如果需要，将更改推送到远程仓库（可选）： 如果您希望将删除操作同步到远程仓库，可以使用以下命令
git push